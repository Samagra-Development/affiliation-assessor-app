/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute , NavigationRoute} from 'workbox-routing';
import { StaleWhileRevalidate,CacheFirst,NetworkFirst } from 'workbox-strategies';
import {CacheableResponsePlugin} from 'workbox-cacheable-response';

clientsClaim();

self.skipWaiting();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

function customRouteMatchCallback({ url, request, event })  {
  // Check whether the request URL matches a specific pattern
  // For example, match requests to an API with a specific path
  console.log(event)
/*   let data;
  self.addEventListener('fetch', (event) => {
    if(event.request.url.endsWith('getTodaysInspections')){
      return 
      data = (event.request.url.endsWith('getTodaysInspections'))
    }
    return (event.request.url.endsWith('getTodaysInspections'))
   // return url;
  })
return data */
}


self.addEventListener('fetch', (event) => {
  console.log(event)
  ///
 
  if (event.request.method ==='POST') {
    event.respondWith(handleNonGetRequests(event.request, event.request.url));
  } 
}); 
 async function handleNonGetRequests(request, url) {
  console.log(url)
  let cacheName="";

  if( url.includes('Inspections')){
    console.log('InspectionsInspectionsInspections')
    cacheName = 'inspections';
  } else if (url.includes('Course')){
    console.log('coursescoursescourses')
    cacheName = 'courses';
  } else if(url.includes('Assessor')){
    console.log('AssessorAssessorAssessor')
    cacheName = 'assessor';
  }

  // Use a cache specifically for non-GET requests
  const cache = await caches.open(cacheName);
  const cacheKey = generateCacheKey(request);
   // Check if the response is already cached
   const cachedResponse = await cache.match(cacheKey);
   if (cachedResponse) {
     return cachedResponse;
   }
  // Fetch the network response
  const networkResponse = await fetch(request.clone());
  const clonedResponse = networkResponse.clone();
  // Clone and cache the network response for future use
    await cache.put(cacheKey, clonedResponse);
  return networkResponse;

} 

function generateCacheKey(request) {
  // This is a simplified example; customize it based on your needs
  return request.url + JSON.stringify(request.clone().body);
}
// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
/* self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
}); */

// Any other custom service worker logic can go here.
